// Code generated from DCell.g4 by ANTLR 4.13.2. DO NOT EDIT.

package parser

import (
	"fmt"
	"github.com/antlr4-go/antlr/v4"
	"sync"
	"unicode"
)

// Suppress unused import error
var _ = fmt.Printf
var _ = sync.Once{}
var _ = unicode.IsLetter

type DCellLexer struct {
	*antlr.BaseLexer
	channelNames []string
	modeNames    []string
	// TODO: EOF string
}

var DCellLexerLexerStaticData struct {
	once                   sync.Once
	serializedATN          []int32
	ChannelNames           []string
	ModeNames              []string
	LiteralNames           []string
	SymbolicNames          []string
	RuleNames              []string
	PredictionContextCache *antlr.PredictionContextCache
	atn                    *antlr.ATN
	decisionToDFA          []*antlr.DFA
}

func dcelllexerLexerInit() {
	staticData := &DCellLexerLexerStaticData
	staticData.ChannelNames = []string{
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	}
	staticData.ModeNames = []string{
		"DEFAULT_MODE",
	}
	staticData.LiteralNames = []string{
		"", "'.'", "'['", "']'", "'is'", "'not'", "'in'", "'('", "')'", "'!'",
		"'~'", "'+'", "'-'", "'**'", "'*'", "'/'", "'//'", "'%'", "'&&'", "'and'",
		"'||'", "'or'", "'<->'", "'implies'", "'<<'", "'>>'", "'&'", "'^'",
		"'|'", "'<='", "'<'", "'>'", "'>='", "'=='", "'!='", "'?'", "':'", "'?:'",
		"'??'", "'as'", "','", "'true'", "'false'", "'null'", "'int'", "'float'",
		"'string'", "'bool'",
	}
	staticData.SymbolicNames = []string{
		"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
		"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
		"", "", "", "", "", "", "", "", "", "", "", "", "", "", "IDENTIFIER",
		"DECIMAL_INTEGER", "HEX_INTEGER", "OCTAL_INTEGER", "BINARY_INTEGER",
		"DECIMAL_FLOAT", "SCIENTIFIC_FLOAT", "SINGLE_QUOTE_STRING", "DOUBLE_QUOTE_STRING",
		"TRIPLE_QUOTE_STRING", "WS", "COMMENT",
	}
	staticData.RuleNames = []string{
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8",
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16",
		"T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "T__23", "T__24",
		"T__25", "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", "T__32",
		"T__33", "T__34", "T__35", "T__36", "T__37", "T__38", "T__39", "T__40",
		"T__41", "T__42", "T__43", "T__44", "T__45", "T__46", "IDENTIFIER",
		"DECIMAL_INTEGER", "HEX_INTEGER", "OCTAL_INTEGER", "BINARY_INTEGER",
		"DECIMAL_FLOAT", "SCIENTIFIC_FLOAT", "SINGLE_QUOTE_STRING", "DOUBLE_QUOTE_STRING",
		"TRIPLE_QUOTE_STRING", "WS", "COMMENT", "ESC", "UNICODE", "HEX",
	}
	staticData.PredictionContextCache = antlr.NewPredictionContextCache()
	staticData.serializedATN = []int32{
		4, 0, 59, 429, 6, -1, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2,
		4, 7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2,
		10, 7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15,
		7, 15, 2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7,
		20, 2, 21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25,
		2, 26, 7, 26, 2, 27, 7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 2,
		31, 7, 31, 2, 32, 7, 32, 2, 33, 7, 33, 2, 34, 7, 34, 2, 35, 7, 35, 2, 36,
		7, 36, 2, 37, 7, 37, 2, 38, 7, 38, 2, 39, 7, 39, 2, 40, 7, 40, 2, 41, 7,
		41, 2, 42, 7, 42, 2, 43, 7, 43, 2, 44, 7, 44, 2, 45, 7, 45, 2, 46, 7, 46,
		2, 47, 7, 47, 2, 48, 7, 48, 2, 49, 7, 49, 2, 50, 7, 50, 2, 51, 7, 51, 2,
		52, 7, 52, 2, 53, 7, 53, 2, 54, 7, 54, 2, 55, 7, 55, 2, 56, 7, 56, 2, 57,
		7, 57, 2, 58, 7, 58, 2, 59, 7, 59, 2, 60, 7, 60, 2, 61, 7, 61, 1, 0, 1,
		0, 1, 1, 1, 1, 1, 2, 1, 2, 1, 3, 1, 3, 1, 3, 1, 4, 1, 4, 1, 4, 1, 4, 1,
		5, 1, 5, 1, 5, 1, 6, 1, 6, 1, 7, 1, 7, 1, 8, 1, 8, 1, 9, 1, 9, 1, 10, 1,
		10, 1, 11, 1, 11, 1, 12, 1, 12, 1, 12, 1, 13, 1, 13, 1, 14, 1, 14, 1, 15,
		1, 15, 1, 15, 1, 16, 1, 16, 1, 17, 1, 17, 1, 17, 1, 18, 1, 18, 1, 18, 1,
		18, 1, 19, 1, 19, 1, 19, 1, 20, 1, 20, 1, 20, 1, 21, 1, 21, 1, 21, 1, 21,
		1, 22, 1, 22, 1, 22, 1, 22, 1, 22, 1, 22, 1, 22, 1, 22, 1, 23, 1, 23, 1,
		23, 1, 24, 1, 24, 1, 24, 1, 25, 1, 25, 1, 26, 1, 26, 1, 27, 1, 27, 1, 28,
		1, 28, 1, 28, 1, 29, 1, 29, 1, 30, 1, 30, 1, 31, 1, 31, 1, 31, 1, 32, 1,
		32, 1, 32, 1, 33, 1, 33, 1, 33, 1, 34, 1, 34, 1, 35, 1, 35, 1, 36, 1, 36,
		1, 36, 1, 37, 1, 37, 1, 37, 1, 38, 1, 38, 1, 38, 1, 39, 1, 39, 1, 40, 1,
		40, 1, 40, 1, 40, 1, 40, 1, 41, 1, 41, 1, 41, 1, 41, 1, 41, 1, 41, 1, 42,
		1, 42, 1, 42, 1, 42, 1, 42, 1, 43, 1, 43, 1, 43, 1, 43, 1, 44, 1, 44, 1,
		44, 1, 44, 1, 44, 1, 44, 1, 45, 1, 45, 1, 45, 1, 45, 1, 45, 1, 45, 1, 45,
		1, 46, 1, 46, 1, 46, 1, 46, 1, 46, 1, 47, 1, 47, 5, 47, 274, 8, 47, 10,
		47, 12, 47, 277, 9, 47, 1, 47, 3, 47, 280, 8, 47, 1, 48, 3, 48, 283, 8,
		48, 1, 48, 1, 48, 5, 48, 287, 8, 48, 10, 48, 12, 48, 290, 9, 48, 1, 48,
		3, 48, 293, 8, 48, 1, 49, 1, 49, 1, 49, 4, 49, 298, 8, 49, 11, 49, 12,
		49, 299, 1, 50, 1, 50, 4, 50, 304, 8, 50, 11, 50, 12, 50, 305, 1, 51, 1,
		51, 1, 51, 4, 51, 311, 8, 51, 11, 51, 12, 51, 312, 1, 52, 3, 52, 316, 8,
		52, 1, 52, 1, 52, 1, 52, 5, 52, 321, 8, 52, 10, 52, 12, 52, 324, 9, 52,
		3, 52, 326, 8, 52, 1, 52, 1, 52, 4, 52, 330, 8, 52, 11, 52, 12, 52, 331,
		1, 53, 3, 53, 335, 8, 53, 1, 53, 1, 53, 1, 53, 5, 53, 340, 8, 53, 10, 53,
		12, 53, 343, 9, 53, 3, 53, 345, 8, 53, 1, 53, 1, 53, 4, 53, 349, 8, 53,
		11, 53, 12, 53, 350, 3, 53, 353, 8, 53, 1, 53, 1, 53, 3, 53, 357, 8, 53,
		1, 53, 1, 53, 5, 53, 361, 8, 53, 10, 53, 12, 53, 364, 9, 53, 1, 54, 1,
		54, 1, 54, 5, 54, 369, 8, 54, 10, 54, 12, 54, 372, 9, 54, 1, 54, 1, 54,
		1, 55, 1, 55, 1, 55, 5, 55, 379, 8, 55, 10, 55, 12, 55, 382, 9, 55, 1,
		55, 1, 55, 1, 56, 1, 56, 1, 56, 1, 56, 1, 56, 1, 56, 5, 56, 392, 8, 56,
		10, 56, 12, 56, 395, 9, 56, 1, 56, 1, 56, 1, 56, 1, 56, 1, 57, 4, 57, 402,
		8, 57, 11, 57, 12, 57, 403, 1, 57, 1, 57, 1, 58, 1, 58, 5, 58, 410, 8,
		58, 10, 58, 12, 58, 413, 9, 58, 1, 58, 1, 58, 1, 59, 1, 59, 1, 59, 3, 59,
		420, 8, 59, 1, 60, 1, 60, 1, 60, 1, 60, 1, 60, 1, 60, 1, 61, 1, 61, 1,
		393, 0, 62, 1, 1, 3, 2, 5, 3, 7, 4, 9, 5, 11, 6, 13, 7, 15, 8, 17, 9, 19,
		10, 21, 11, 23, 12, 25, 13, 27, 14, 29, 15, 31, 16, 33, 17, 35, 18, 37,
		19, 39, 20, 41, 21, 43, 22, 45, 23, 47, 24, 49, 25, 51, 26, 53, 27, 55,
		28, 57, 29, 59, 30, 61, 31, 63, 32, 65, 33, 67, 34, 69, 35, 71, 36, 73,
		37, 75, 38, 77, 39, 79, 40, 81, 41, 83, 42, 85, 43, 87, 44, 89, 45, 91,
		46, 93, 47, 95, 48, 97, 49, 99, 50, 101, 51, 103, 52, 105, 53, 107, 54,
		109, 55, 111, 56, 113, 57, 115, 58, 117, 59, 119, 0, 121, 0, 123, 0, 1,
		0, 17, 3, 0, 65, 90, 95, 95, 97, 122, 5, 0, 45, 45, 48, 57, 65, 90, 95,
		95, 97, 122, 4, 0, 48, 57, 65, 90, 95, 95, 97, 122, 1, 0, 49, 57, 1, 0,
		48, 57, 2, 0, 88, 88, 120, 120, 3, 0, 48, 57, 65, 70, 97, 102, 1, 0, 48,
		55, 2, 0, 66, 66, 98, 98, 1, 0, 48, 49, 2, 0, 69, 69, 101, 101, 2, 0, 43,
		43, 45, 45, 4, 0, 10, 10, 13, 13, 39, 39, 92, 92, 4, 0, 10, 10, 13, 13,
		34, 34, 92, 92, 3, 0, 9, 10, 13, 13, 32, 32, 2, 0, 10, 10, 13, 13, 8, 0,
		39, 39, 47, 47, 92, 92, 96, 96, 102, 102, 110, 110, 114, 114, 116, 116,
		453, 0, 1, 1, 0, 0, 0, 0, 3, 1, 0, 0, 0, 0, 5, 1, 0, 0, 0, 0, 7, 1, 0,
		0, 0, 0, 9, 1, 0, 0, 0, 0, 11, 1, 0, 0, 0, 0, 13, 1, 0, 0, 0, 0, 15, 1,
		0, 0, 0, 0, 17, 1, 0, 0, 0, 0, 19, 1, 0, 0, 0, 0, 21, 1, 0, 0, 0, 0, 23,
		1, 0, 0, 0, 0, 25, 1, 0, 0, 0, 0, 27, 1, 0, 0, 0, 0, 29, 1, 0, 0, 0, 0,
		31, 1, 0, 0, 0, 0, 33, 1, 0, 0, 0, 0, 35, 1, 0, 0, 0, 0, 37, 1, 0, 0, 0,
		0, 39, 1, 0, 0, 0, 0, 41, 1, 0, 0, 0, 0, 43, 1, 0, 0, 0, 0, 45, 1, 0, 0,
		0, 0, 47, 1, 0, 0, 0, 0, 49, 1, 0, 0, 0, 0, 51, 1, 0, 0, 0, 0, 53, 1, 0,
		0, 0, 0, 55, 1, 0, 0, 0, 0, 57, 1, 0, 0, 0, 0, 59, 1, 0, 0, 0, 0, 61, 1,
		0, 0, 0, 0, 63, 1, 0, 0, 0, 0, 65, 1, 0, 0, 0, 0, 67, 1, 0, 0, 0, 0, 69,
		1, 0, 0, 0, 0, 71, 1, 0, 0, 0, 0, 73, 1, 0, 0, 0, 0, 75, 1, 0, 0, 0, 0,
		77, 1, 0, 0, 0, 0, 79, 1, 0, 0, 0, 0, 81, 1, 0, 0, 0, 0, 83, 1, 0, 0, 0,
		0, 85, 1, 0, 0, 0, 0, 87, 1, 0, 0, 0, 0, 89, 1, 0, 0, 0, 0, 91, 1, 0, 0,
		0, 0, 93, 1, 0, 0, 0, 0, 95, 1, 0, 0, 0, 0, 97, 1, 0, 0, 0, 0, 99, 1, 0,
		0, 0, 0, 101, 1, 0, 0, 0, 0, 103, 1, 0, 0, 0, 0, 105, 1, 0, 0, 0, 0, 107,
		1, 0, 0, 0, 0, 109, 1, 0, 0, 0, 0, 111, 1, 0, 0, 0, 0, 113, 1, 0, 0, 0,
		0, 115, 1, 0, 0, 0, 0, 117, 1, 0, 0, 0, 1, 125, 1, 0, 0, 0, 3, 127, 1,
		0, 0, 0, 5, 129, 1, 0, 0, 0, 7, 131, 1, 0, 0, 0, 9, 134, 1, 0, 0, 0, 11,
		138, 1, 0, 0, 0, 13, 141, 1, 0, 0, 0, 15, 143, 1, 0, 0, 0, 17, 145, 1,
		0, 0, 0, 19, 147, 1, 0, 0, 0, 21, 149, 1, 0, 0, 0, 23, 151, 1, 0, 0, 0,
		25, 153, 1, 0, 0, 0, 27, 156, 1, 0, 0, 0, 29, 158, 1, 0, 0, 0, 31, 160,
		1, 0, 0, 0, 33, 163, 1, 0, 0, 0, 35, 165, 1, 0, 0, 0, 37, 168, 1, 0, 0,
		0, 39, 172, 1, 0, 0, 0, 41, 175, 1, 0, 0, 0, 43, 178, 1, 0, 0, 0, 45, 182,
		1, 0, 0, 0, 47, 190, 1, 0, 0, 0, 49, 193, 1, 0, 0, 0, 51, 196, 1, 0, 0,
		0, 53, 198, 1, 0, 0, 0, 55, 200, 1, 0, 0, 0, 57, 202, 1, 0, 0, 0, 59, 205,
		1, 0, 0, 0, 61, 207, 1, 0, 0, 0, 63, 209, 1, 0, 0, 0, 65, 212, 1, 0, 0,
		0, 67, 215, 1, 0, 0, 0, 69, 218, 1, 0, 0, 0, 71, 220, 1, 0, 0, 0, 73, 222,
		1, 0, 0, 0, 75, 225, 1, 0, 0, 0, 77, 228, 1, 0, 0, 0, 79, 231, 1, 0, 0,
		0, 81, 233, 1, 0, 0, 0, 83, 238, 1, 0, 0, 0, 85, 244, 1, 0, 0, 0, 87, 249,
		1, 0, 0, 0, 89, 253, 1, 0, 0, 0, 91, 259, 1, 0, 0, 0, 93, 266, 1, 0, 0,
		0, 95, 271, 1, 0, 0, 0, 97, 292, 1, 0, 0, 0, 99, 294, 1, 0, 0, 0, 101,
		301, 1, 0, 0, 0, 103, 307, 1, 0, 0, 0, 105, 315, 1, 0, 0, 0, 107, 334,
		1, 0, 0, 0, 109, 365, 1, 0, 0, 0, 111, 375, 1, 0, 0, 0, 113, 385, 1, 0,
		0, 0, 115, 401, 1, 0, 0, 0, 117, 407, 1, 0, 0, 0, 119, 416, 1, 0, 0, 0,
		121, 421, 1, 0, 0, 0, 123, 427, 1, 0, 0, 0, 125, 126, 5, 46, 0, 0, 126,
		2, 1, 0, 0, 0, 127, 128, 5, 91, 0, 0, 128, 4, 1, 0, 0, 0, 129, 130, 5,
		93, 0, 0, 130, 6, 1, 0, 0, 0, 131, 132, 5, 105, 0, 0, 132, 133, 5, 115,
		0, 0, 133, 8, 1, 0, 0, 0, 134, 135, 5, 110, 0, 0, 135, 136, 5, 111, 0,
		0, 136, 137, 5, 116, 0, 0, 137, 10, 1, 0, 0, 0, 138, 139, 5, 105, 0, 0,
		139, 140, 5, 110, 0, 0, 140, 12, 1, 0, 0, 0, 141, 142, 5, 40, 0, 0, 142,
		14, 1, 0, 0, 0, 143, 144, 5, 41, 0, 0, 144, 16, 1, 0, 0, 0, 145, 146, 5,
		33, 0, 0, 146, 18, 1, 0, 0, 0, 147, 148, 5, 126, 0, 0, 148, 20, 1, 0, 0,
		0, 149, 150, 5, 43, 0, 0, 150, 22, 1, 0, 0, 0, 151, 152, 5, 45, 0, 0, 152,
		24, 1, 0, 0, 0, 153, 154, 5, 42, 0, 0, 154, 155, 5, 42, 0, 0, 155, 26,
		1, 0, 0, 0, 156, 157, 5, 42, 0, 0, 157, 28, 1, 0, 0, 0, 158, 159, 5, 47,
		0, 0, 159, 30, 1, 0, 0, 0, 160, 161, 5, 47, 0, 0, 161, 162, 5, 47, 0, 0,
		162, 32, 1, 0, 0, 0, 163, 164, 5, 37, 0, 0, 164, 34, 1, 0, 0, 0, 165, 166,
		5, 38, 0, 0, 166, 167, 5, 38, 0, 0, 167, 36, 1, 0, 0, 0, 168, 169, 5, 97,
		0, 0, 169, 170, 5, 110, 0, 0, 170, 171, 5, 100, 0, 0, 171, 38, 1, 0, 0,
		0, 172, 173, 5, 124, 0, 0, 173, 174, 5, 124, 0, 0, 174, 40, 1, 0, 0, 0,
		175, 176, 5, 111, 0, 0, 176, 177, 5, 114, 0, 0, 177, 42, 1, 0, 0, 0, 178,
		179, 5, 60, 0, 0, 179, 180, 5, 45, 0, 0, 180, 181, 5, 62, 0, 0, 181, 44,
		1, 0, 0, 0, 182, 183, 5, 105, 0, 0, 183, 184, 5, 109, 0, 0, 184, 185, 5,
		112, 0, 0, 185, 186, 5, 108, 0, 0, 186, 187, 5, 105, 0, 0, 187, 188, 5,
		101, 0, 0, 188, 189, 5, 115, 0, 0, 189, 46, 1, 0, 0, 0, 190, 191, 5, 60,
		0, 0, 191, 192, 5, 60, 0, 0, 192, 48, 1, 0, 0, 0, 193, 194, 5, 62, 0, 0,
		194, 195, 5, 62, 0, 0, 195, 50, 1, 0, 0, 0, 196, 197, 5, 38, 0, 0, 197,
		52, 1, 0, 0, 0, 198, 199, 5, 94, 0, 0, 199, 54, 1, 0, 0, 0, 200, 201, 5,
		124, 0, 0, 201, 56, 1, 0, 0, 0, 202, 203, 5, 60, 0, 0, 203, 204, 5, 61,
		0, 0, 204, 58, 1, 0, 0, 0, 205, 206, 5, 60, 0, 0, 206, 60, 1, 0, 0, 0,
		207, 208, 5, 62, 0, 0, 208, 62, 1, 0, 0, 0, 209, 210, 5, 62, 0, 0, 210,
		211, 5, 61, 0, 0, 211, 64, 1, 0, 0, 0, 212, 213, 5, 61, 0, 0, 213, 214,
		5, 61, 0, 0, 214, 66, 1, 0, 0, 0, 215, 216, 5, 33, 0, 0, 216, 217, 5, 61,
		0, 0, 217, 68, 1, 0, 0, 0, 218, 219, 5, 63, 0, 0, 219, 70, 1, 0, 0, 0,
		220, 221, 5, 58, 0, 0, 221, 72, 1, 0, 0, 0, 222, 223, 5, 63, 0, 0, 223,
		224, 5, 58, 0, 0, 224, 74, 1, 0, 0, 0, 225, 226, 5, 63, 0, 0, 226, 227,
		5, 63, 0, 0, 227, 76, 1, 0, 0, 0, 228, 229, 5, 97, 0, 0, 229, 230, 5, 115,
		0, 0, 230, 78, 1, 0, 0, 0, 231, 232, 5, 44, 0, 0, 232, 80, 1, 0, 0, 0,
		233, 234, 5, 116, 0, 0, 234, 235, 5, 114, 0, 0, 235, 236, 5, 117, 0, 0,
		236, 237, 5, 101, 0, 0, 237, 82, 1, 0, 0, 0, 238, 239, 5, 102, 0, 0, 239,
		240, 5, 97, 0, 0, 240, 241, 5, 108, 0, 0, 241, 242, 5, 115, 0, 0, 242,
		243, 5, 101, 0, 0, 243, 84, 1, 0, 0, 0, 244, 245, 5, 110, 0, 0, 245, 246,
		5, 117, 0, 0, 246, 247, 5, 108, 0, 0, 247, 248, 5, 108, 0, 0, 248, 86,
		1, 0, 0, 0, 249, 250, 5, 105, 0, 0, 250, 251, 5, 110, 0, 0, 251, 252, 5,
		116, 0, 0, 252, 88, 1, 0, 0, 0, 253, 254, 5, 102, 0, 0, 254, 255, 5, 108,
		0, 0, 255, 256, 5, 111, 0, 0, 256, 257, 5, 97, 0, 0, 257, 258, 5, 116,
		0, 0, 258, 90, 1, 0, 0, 0, 259, 260, 5, 115, 0, 0, 260, 261, 5, 116, 0,
		0, 261, 262, 5, 114, 0, 0, 262, 263, 5, 105, 0, 0, 263, 264, 5, 110, 0,
		0, 264, 265, 5, 103, 0, 0, 265, 92, 1, 0, 0, 0, 266, 267, 5, 98, 0, 0,
		267, 268, 5, 111, 0, 0, 268, 269, 5, 111, 0, 0, 269, 270, 5, 108, 0, 0,
		270, 94, 1, 0, 0, 0, 271, 275, 7, 0, 0, 0, 272, 274, 7, 1, 0, 0, 273, 272,
		1, 0, 0, 0, 274, 277, 1, 0, 0, 0, 275, 273, 1, 0, 0, 0, 275, 276, 1, 0,
		0, 0, 276, 279, 1, 0, 0, 0, 277, 275, 1, 0, 0, 0, 278, 280, 7, 2, 0, 0,
		279, 278, 1, 0, 0, 0, 279, 280, 1, 0, 0, 0, 280, 96, 1, 0, 0, 0, 281, 283,
		5, 45, 0, 0, 282, 281, 1, 0, 0, 0, 282, 283, 1, 0, 0, 0, 283, 284, 1, 0,
		0, 0, 284, 288, 7, 3, 0, 0, 285, 287, 7, 4, 0, 0, 286, 285, 1, 0, 0, 0,
		287, 290, 1, 0, 0, 0, 288, 286, 1, 0, 0, 0, 288, 289, 1, 0, 0, 0, 289,
		293, 1, 0, 0, 0, 290, 288, 1, 0, 0, 0, 291, 293, 5, 48, 0, 0, 292, 282,
		1, 0, 0, 0, 292, 291, 1, 0, 0, 0, 293, 98, 1, 0, 0, 0, 294, 295, 5, 48,
		0, 0, 295, 297, 7, 5, 0, 0, 296, 298, 7, 6, 0, 0, 297, 296, 1, 0, 0, 0,
		298, 299, 1, 0, 0, 0, 299, 297, 1, 0, 0, 0, 299, 300, 1, 0, 0, 0, 300,
		100, 1, 0, 0, 0, 301, 303, 5, 48, 0, 0, 302, 304, 7, 7, 0, 0, 303, 302,
		1, 0, 0, 0, 304, 305, 1, 0, 0, 0, 305, 303, 1, 0, 0, 0, 305, 306, 1, 0,
		0, 0, 306, 102, 1, 0, 0, 0, 307, 308, 5, 48, 0, 0, 308, 310, 7, 8, 0, 0,
		309, 311, 7, 9, 0, 0, 310, 309, 1, 0, 0, 0, 311, 312, 1, 0, 0, 0, 312,
		310, 1, 0, 0, 0, 312, 313, 1, 0, 0, 0, 313, 104, 1, 0, 0, 0, 314, 316,
		5, 45, 0, 0, 315, 314, 1, 0, 0, 0, 315, 316, 1, 0, 0, 0, 316, 325, 1, 0,
		0, 0, 317, 326, 5, 48, 0, 0, 318, 322, 7, 3, 0, 0, 319, 321, 7, 4, 0, 0,
		320, 319, 1, 0, 0, 0, 321, 324, 1, 0, 0, 0, 322, 320, 1, 0, 0, 0, 322,
		323, 1, 0, 0, 0, 323, 326, 1, 0, 0, 0, 324, 322, 1, 0, 0, 0, 325, 317,
		1, 0, 0, 0, 325, 318, 1, 0, 0, 0, 326, 327, 1, 0, 0, 0, 327, 329, 5, 46,
		0, 0, 328, 330, 7, 4, 0, 0, 329, 328, 1, 0, 0, 0, 330, 331, 1, 0, 0, 0,
		331, 329, 1, 0, 0, 0, 331, 332, 1, 0, 0, 0, 332, 106, 1, 0, 0, 0, 333,
		335, 5, 45, 0, 0, 334, 333, 1, 0, 0, 0, 334, 335, 1, 0, 0, 0, 335, 344,
		1, 0, 0, 0, 336, 345, 5, 48, 0, 0, 337, 341, 7, 3, 0, 0, 338, 340, 7, 4,
		0, 0, 339, 338, 1, 0, 0, 0, 340, 343, 1, 0, 0, 0, 341, 339, 1, 0, 0, 0,
		341, 342, 1, 0, 0, 0, 342, 345, 1, 0, 0, 0, 343, 341, 1, 0, 0, 0, 344,
		336, 1, 0, 0, 0, 344, 337, 1, 0, 0, 0, 345, 352, 1, 0, 0, 0, 346, 348,
		5, 46, 0, 0, 347, 349, 7, 4, 0, 0, 348, 347, 1, 0, 0, 0, 349, 350, 1, 0,
		0, 0, 350, 348, 1, 0, 0, 0, 350, 351, 1, 0, 0, 0, 351, 353, 1, 0, 0, 0,
		352, 346, 1, 0, 0, 0, 352, 353, 1, 0, 0, 0, 353, 354, 1, 0, 0, 0, 354,
		356, 7, 10, 0, 0, 355, 357, 7, 11, 0, 0, 356, 355, 1, 0, 0, 0, 356, 357,
		1, 0, 0, 0, 357, 358, 1, 0, 0, 0, 358, 362, 7, 3, 0, 0, 359, 361, 7, 4,
		0, 0, 360, 359, 1, 0, 0, 0, 361, 364, 1, 0, 0, 0, 362, 360, 1, 0, 0, 0,
		362, 363, 1, 0, 0, 0, 363, 108, 1, 0, 0, 0, 364, 362, 1, 0, 0, 0, 365,
		370, 5, 39, 0, 0, 366, 369, 3, 119, 59, 0, 367, 369, 8, 12, 0, 0, 368,
		366, 1, 0, 0, 0, 368, 367, 1, 0, 0, 0, 369, 372, 1, 0, 0, 0, 370, 368,
		1, 0, 0, 0, 370, 371, 1, 0, 0, 0, 371, 373, 1, 0, 0, 0, 372, 370, 1, 0,
		0, 0, 373, 374, 5, 39, 0, 0, 374, 110, 1, 0, 0, 0, 375, 380, 5, 34, 0,
		0, 376, 379, 3, 119, 59, 0, 377, 379, 8, 13, 0, 0, 378, 376, 1, 0, 0, 0,
		378, 377, 1, 0, 0, 0, 379, 382, 1, 0, 0, 0, 380, 378, 1, 0, 0, 0, 380,
		381, 1, 0, 0, 0, 381, 383, 1, 0, 0, 0, 382, 380, 1, 0, 0, 0, 383, 384,
		5, 34, 0, 0, 384, 112, 1, 0, 0, 0, 385, 386, 5, 34, 0, 0, 386, 387, 5,
		34, 0, 0, 387, 388, 5, 34, 0, 0, 388, 393, 1, 0, 0, 0, 389, 392, 3, 119,
		59, 0, 390, 392, 9, 0, 0, 0, 391, 389, 1, 0, 0, 0, 391, 390, 1, 0, 0, 0,
		392, 395, 1, 0, 0, 0, 393, 394, 1, 0, 0, 0, 393, 391, 1, 0, 0, 0, 394,
		396, 1, 0, 0, 0, 395, 393, 1, 0, 0, 0, 396, 397, 5, 34, 0, 0, 397, 398,
		5, 34, 0, 0, 398, 399, 5, 34, 0, 0, 399, 114, 1, 0, 0, 0, 400, 402, 7,
		14, 0, 0, 401, 400, 1, 0, 0, 0, 402, 403, 1, 0, 0, 0, 403, 401, 1, 0, 0,
		0, 403, 404, 1, 0, 0, 0, 404, 405, 1, 0, 0, 0, 405, 406, 6, 57, 0, 0, 406,
		116, 1, 0, 0, 0, 407, 411, 5, 35, 0, 0, 408, 410, 8, 15, 0, 0, 409, 408,
		1, 0, 0, 0, 410, 413, 1, 0, 0, 0, 411, 409, 1, 0, 0, 0, 411, 412, 1, 0,
		0, 0, 412, 414, 1, 0, 0, 0, 413, 411, 1, 0, 0, 0, 414, 415, 6, 58, 0, 0,
		415, 118, 1, 0, 0, 0, 416, 419, 5, 92, 0, 0, 417, 420, 7, 16, 0, 0, 418,
		420, 3, 121, 60, 0, 419, 417, 1, 0, 0, 0, 419, 418, 1, 0, 0, 0, 420, 120,
		1, 0, 0, 0, 421, 422, 5, 117, 0, 0, 422, 423, 3, 123, 61, 0, 423, 424,
		3, 123, 61, 0, 424, 425, 3, 123, 61, 0, 425, 426, 3, 123, 61, 0, 426, 122,
		1, 0, 0, 0, 427, 428, 7, 6, 0, 0, 428, 124, 1, 0, 0, 0, 29, 0, 275, 279,
		282, 288, 292, 299, 305, 312, 315, 322, 325, 331, 334, 341, 344, 350, 352,
		356, 362, 368, 370, 378, 380, 391, 393, 403, 411, 419, 1, 0, 1, 0,
	}
	deserializer := antlr.NewATNDeserializer(nil)
	staticData.atn = deserializer.Deserialize(staticData.serializedATN)
	atn := staticData.atn
	staticData.decisionToDFA = make([]*antlr.DFA, len(atn.DecisionToState))
	decisionToDFA := staticData.decisionToDFA
	for index, state := range atn.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(state, index)
	}
}

// DCellLexerInit initializes any static state used to implement DCellLexer. By default the
// static state used to implement the lexer is lazily initialized during the first call to
// NewDCellLexer(). You can call this function if you wish to initialize the static state ahead
// of time.
func DCellLexerInit() {
	staticData := &DCellLexerLexerStaticData
	staticData.once.Do(dcelllexerLexerInit)
}

// NewDCellLexer produces a new lexer instance for the optional input antlr.CharStream.
func NewDCellLexer(input antlr.CharStream) *DCellLexer {
	DCellLexerInit()
	l := new(DCellLexer)
	l.BaseLexer = antlr.NewBaseLexer(input)
	staticData := &DCellLexerLexerStaticData
	l.Interpreter = antlr.NewLexerATNSimulator(l, staticData.atn, staticData.decisionToDFA, staticData.PredictionContextCache)
	l.channelNames = staticData.ChannelNames
	l.modeNames = staticData.ModeNames
	l.RuleNames = staticData.RuleNames
	l.LiteralNames = staticData.LiteralNames
	l.SymbolicNames = staticData.SymbolicNames
	l.GrammarFileName = "DCell.g4"
	// TODO: l.EOF = antlr.TokenEOF

	return l
}

// DCellLexer tokens.
const (
	DCellLexerT__0                = 1
	DCellLexerT__1                = 2
	DCellLexerT__2                = 3
	DCellLexerT__3                = 4
	DCellLexerT__4                = 5
	DCellLexerT__5                = 6
	DCellLexerT__6                = 7
	DCellLexerT__7                = 8
	DCellLexerT__8                = 9
	DCellLexerT__9                = 10
	DCellLexerT__10               = 11
	DCellLexerT__11               = 12
	DCellLexerT__12               = 13
	DCellLexerT__13               = 14
	DCellLexerT__14               = 15
	DCellLexerT__15               = 16
	DCellLexerT__16               = 17
	DCellLexerT__17               = 18
	DCellLexerT__18               = 19
	DCellLexerT__19               = 20
	DCellLexerT__20               = 21
	DCellLexerT__21               = 22
	DCellLexerT__22               = 23
	DCellLexerT__23               = 24
	DCellLexerT__24               = 25
	DCellLexerT__25               = 26
	DCellLexerT__26               = 27
	DCellLexerT__27               = 28
	DCellLexerT__28               = 29
	DCellLexerT__29               = 30
	DCellLexerT__30               = 31
	DCellLexerT__31               = 32
	DCellLexerT__32               = 33
	DCellLexerT__33               = 34
	DCellLexerT__34               = 35
	DCellLexerT__35               = 36
	DCellLexerT__36               = 37
	DCellLexerT__37               = 38
	DCellLexerT__38               = 39
	DCellLexerT__39               = 40
	DCellLexerT__40               = 41
	DCellLexerT__41               = 42
	DCellLexerT__42               = 43
	DCellLexerT__43               = 44
	DCellLexerT__44               = 45
	DCellLexerT__45               = 46
	DCellLexerT__46               = 47
	DCellLexerIDENTIFIER          = 48
	DCellLexerDECIMAL_INTEGER     = 49
	DCellLexerHEX_INTEGER         = 50
	DCellLexerOCTAL_INTEGER       = 51
	DCellLexerBINARY_INTEGER      = 52
	DCellLexerDECIMAL_FLOAT       = 53
	DCellLexerSCIENTIFIC_FLOAT    = 54
	DCellLexerSINGLE_QUOTE_STRING = 55
	DCellLexerDOUBLE_QUOTE_STRING = 56
	DCellLexerTRIPLE_QUOTE_STRING = 57
	DCellLexerWS                  = 58
	DCellLexerCOMMENT             = 59
)
